##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##


# This map block is so that the Connection header is correctly set to 'close' when the
#  Upgrade header in the request is set to ''
# See: https://www.nginx.com/blog/websocket-nginx/ -> 'NGINX WebSocket Example' -> point 6
map $http_upgrade $connection_upgrade {
	default upgrade;
	'' close;
}


# Default server configuration
#
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	listen 443 ssl default_server;
	listen [::]:443 ssl default_server;
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	ssl_certificate /home/pi/EosRemote/ssl/remcont.net_ssl_certificate.cer;
	ssl_certificate_key /home/pi/EosRemote/ssl/_.remcont.net_private_key.key;

	ssl_session_timeout 5m;

	# ssl_protocols SSLv3 TLSv1;
	# ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
	ssl_prefer_server_ciphers on;

	root /home/pi/www;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.js;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

#	# If Node-RED is serving up the EosRemote sub-website:
#	location /eos/ {
#		proxy_pass       http://127.0.0.1:1880;
#		proxy_set_header Host      $host;
#		proxy_set_header X-Real-IP $remote_addr;
#	}
#
#	# catch the error if the back-end server (Node-RED) isn't running
#	# note: using error_page like this seems to default to returning a
#	#  302 (Moved Temporarily) response code
#	error_page 502 /lx-offline.html;

	location /ws/ {
		proxy_pass http://127.0.0.1:1880/ws/;
		# need to set the following directives to proxy a websocket - see:
		# https://www.nginx.com/blog/websocket-nginx/
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;
		proxy_set_header Host $host;
	}

	location /node-red/ {
		proxy_pass http://127.0.0.1:1880/;
	}

	location /node-red/comms {
		proxy_pass http://127.0.0.1:1880/comms;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;
		proxy_set_header Host $host;
	}

	location /ui {
		proxy_pass http://127.0.0.1:1880/ui;
	}

	location /ui/socket.io {
		proxy_pass http://127.0.0.1:1880/ui/socket.io;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;
		proxy_set_header Host $host;
	}

	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php5-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	# With php5-fpm:
	#	fastcgi_pass unix:/var/run/php5-fpm.sock;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}


# This server block will redirect from:
#  http://home.remcont.net/... to https://home.remcont.net/...
server {
	listen 80;
	server_name home.remcont.net;
	return 302 https://$server_name$request_uri;
}


# This server block will redirect from:
#  http://192.168.1.123/... to https://home.remcont.net/...
server {
	listen 80;
	server_name 192.168.1.123;
	return 302 https://home.remcont.net$request_uri;
}


# This server block should redirect from:
#  https://192.168.1.123/... to https://home.remcont.net/...
# Hmmm... for some reason, requests to https://192.168.1.123/ fail because the wrong
#  certificate is sent (the remcont.net_ssl_certificate.cer file).  But put this one
#  first (or make it the default_server), and this certificate gets sent for all
#  requests (including https://home.remcont.net/)...
# Ah... As noted here:
# https://docs.nginx.com/nginx/admin-guide/security-controls/terminating-ssl-http/#server-name-indication
# SNI (used to work out which server is being requested, to send the right certificate)
#  shouldn't be relied on to work with IP addresses
# Maybe if we set up multiple IP addresses, for different SSL settings...
server {
	# listen 443 ssl default_server;
	listen 443 ssl;
	server_name 192.168.1.123;

	# it seems that if we don't specify a certificate and key here that it
	# defaults to using the certificate and key from the default server
	# (ie. the one above!)
	#ssl_certificate /home/pi/EosRemote/ssl/server-cert.pem;
	#ssl_certificate_key /home/pi/EosRemote/ssl/server-key.pem;

	#ssl_session_timeout 5m;

	# ssl_protocols SSLv3 TLSv1;
	# ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
	#ssl_prefer_server_ciphers on;

	return 302 https://home.remcont.net$request_uri;
}
