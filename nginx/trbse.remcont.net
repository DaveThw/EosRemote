##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# This config file will redirect from:
#  http://trbse.remcont.net/...  -->  https://trbse.remcont.net/...
# and
#  http://192.168.1.3/...        -->  https://trbse.remcont.net/...
# and
#  https://192.168.1.3:1880/...  -->  https://trbse.remcont.net/eos/...
# and
#  http://192.168.1.3:1880/...   -->  https://trbse.remcont.net/eos/...


# This server block will redirect from:
#  http://trbse.remcont.net/... to https://trbse.remcont.net/...
# and
#  http://192.168.1.3/...    to https://trbse.remcont.net/...
server {
	listen 80;
	server_name trbse.remcont.net 192.168.1.3;
	return 302 https://trbse.remcont.net$request_uri;
}

# We can't easily redirect from https://192.168.1.3/... becuase:
#  - SNI (used to work out which server is being requested) shouldn't be relied on
#    to work with IP addresses
#  - if we bind to 192.168.1.3:443, then we are replacing the default server on
#    that IP address
#  - trbse.remcont.net resolves to 192.168.1.3
#  - so if we replace the default server with one that redirects to trbse.remcont.net
#    then any request for either 192.168.1.3 or trbse.remcont.net will wind up in
#    and infinite loop of redirects!..
# We might be able to get around this by:
#  - setting the default ssl server to redirect to trbse.remcont.net
#  - create a specific server block with `server_name trbse.remcont.net` to serve up
#    the webpages



# This server block will redirect from:
#  https://192.168.1.3:1880/... to https://trbse.remcont.net/eos/...
# And from:
#  http://192.168.1.3:1880/...  to https://trbse.remcont.net/eos/...
# Note: we're specifying the IP address to bind to here, because the Node-Red
#  backend server is binding to 127.0.0.1:1880, and if we don't specify an IP
#  address nginx will try to bind to all addresses, including local loopback...
# Note: also, it turns out that binding to a specific IP address is good
#  because SNI can't be used reliably with IP addresses (see above)
server {
	listen 192.168.1.3:1880 ssl;
	# server_name 192.168.1.3;
	return 302 https://trbse.remcont.net/eos$request_uri;
	ssl_certificate /home/pi/EosRemote/ssl/server-cert.pem;
	ssl_certificate_key /home/pi/EosRemote/ssl/server-key.pem;
	#ssl_session_timeout 5m;
	#ssl_prefer_server_ciphers on;

	# if the user tries to access http://192.168.1.3:1880/... (note: http, not https)
	#  then they will trigger an internal 497 error (which defaults to sending a
	#  400 (Bad Request) response code) - so lets redirect them somewhere else instead...
	# details found here:
	#  https://serverfault.com/a/379906
	#  http://nginx.org/en/docs/http/ngx_http_ssl_module.html#errors
	# note: using error_page like this seems to default to returning a
	#  302 (Moved Temporarily) response code - could specify 301 (Moved Permanently),
	#  or something else, instead if we want...
	#error_page 497 =302 http://192.168.1.3/eos$request_uri;
	#error_page 497 =301 http://192.168.1.3/eos$request_uri;
	error_page 497 https://trbse.remcont.net/eos$request_uri;
}
